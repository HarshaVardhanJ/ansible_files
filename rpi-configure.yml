---
# rpi_configure.yml :   Playbook for configuring freshly-booted Raspberry Pis

- hosts: rpi
  remote_user: pi
  become: yes

  vars:
    # Packages to be installed
    packages:
        - vim                           # Vim Text Editor
        - vim-common                    # Vim Text Editor common files
        - tmux                          # Terminal Multiplexer
        - ranger                        # Terminal-based file manager
        - htop                          # Process monitor
        - sysstat                       # For system activity reporter
        - elinks                        # CLI-based browser
        - network-manager               # Network management
        - libnm-glib-dev                # Needed for managing networking using Ansible
        - dbus                          # Needed for managing networking using Ansible   
        - python-dbus                   # Needed by 'nmcli' module of Ansible
        - libsemanage1                  # Needed by 'nmcli' module of Ansible
        - policycoreutils-python-utils  # Needed by 'nmcli' module of Ansible
        - iptables                      # IPTables firewall
        - iptables-persistent           # Package to ensure that firewall rules survive reboot

    # SSH keys to be added
    ssh_keys:
        - /Users/harshavardhanj/.ssh/keychain/rpi_key.pub

    sshd_config_file:
      - /Users/harshavardhanj/GitRepos/ansible_files/sshd_config

    sshd_dir: /etc/ssh/

    # Vim configuration file
    vim_config_file:
        - /Users/harshavardhanj/.vimrc

    # NetworkManager ethernet interface information
    nmcli_eth:
        - conn_name: '{{ eth_laptop_name }}'
          type: ethernet
          ifname: eth0
          ip4: '{{ eth_laptop_ip }}'
          gw4: '{{ eth_laptop_gw }}'
          
        - conn_name: '{{ eth_router_name }}'
          type: ethernet
          ifname: eth0
          ip4: '{{ eth_router_ip }}'
          gw4: '{{ eth_router_gw }}'

    # NetworkManager wireless interface information
    nmcli_wlan:
        - conn_name: "WiFiOffice"
          ifname: wlan0
          ip4: '{{ wlan_ip }}'
          gw4: '{{ wlan_gw }}'
          dns: '{{ wlan_dns }}'
          ssid: "Office"
          psk: '"eme@1363"'

        - conn_name: "WiFiSecond_Floor"
          ifname: wlan0
          ip4: '{{ wlan_ip }}'
          gw4: '{{ wlan_gw }}'
          dns: '{{ wlan_dns }}'
          ssid: "Second_Floor"
          psk: '"11235_burl_81321"'

    eth_router_name: "WiredRouterConn"
    eth_router_ip: "192.168.1.51/24"
    eth_router_gw: "192.168.1.1"

    eth_laptop_name: "WiredLaptopConn"
    eth_laptop_ip: "192.168.2.10/24"
    eth_laptop_gw: "192.168.2.1"

    wlan_name: "WiFiConn"
    wlan_ip: "192.168.1.51/24"
    wlan_gw: "192.168.1.1"
    wlan_dns: "8.8.8.8 8.8.4.4"


  tasks:
    # Update all packages and repositories
    - name: Update all packages
      apt:
          name: "*"
          state: latest
          update_cache: yes

    # Install packages given in 'vars'
    - name: Install "{{ packages }}"
      apt:
          name: "{{ packages }}"
          state: latest
          update_cache: yes

    # Cleanup after updating and installation of packages
    - name: Remove useless packages from cache
      apt:
          autoclean: yes

    - name: Remove dependencies that are no longer required
      apt:
          autoremove: yes

    - name: Copy local SSH public key(s) to machine
      copy:
          src: "{{ item }}"
          dest: ~/
          owner: pi
          group: pi
          mode: 0400
      with_items:
          - "{{ ssh_keys }}"
      register: ssh_key_file

    # Copy given SSH keys to user's 'authorized keys' file
    - name: Copy SSH keys
      authorized_key:
          user: pi
          state: present
          key: "{{ item }}"
      with_items:
          - "{{ ssh_key_file.dest }}"
      when: ssh_key_file.changed
      notify: delete ssh public keys


    # Copy Vim configuration file to machine
    - name: Copy Vim configuration file
      copy:
          src: "{{ item }}"
          dest: ~/
          owner: pi
          group: pi
          mode: 0644
      with_items:
          - "{{ vim_config_file }}"


    # Copy SSHD configuration 'sshd_config' file
    - name: Copy SSHD configuration file
      copy:
        src: "{{ item }}"
        dest: "{{ sshd_dir }}"
        owner: root
        group: root
        mode: 0644
      with_items:
        - "{{ sshd_config_file }}"

    # Set up Wired Networking
    - name: Set up Wired(Ethernet) Connection
      nmcli:
          conn_name: '{{ item.conn_name }}'
          type: '{{ item.type }}'
          ifname: '{{ item.ifname }}'
          ip4: '{{ item.ip4 }}'
          gw4: '{{ item.gw4 }}'
          state: present
          autoconnect: yes
      with_items:
          - "{{ nmcli_eth }}"

     # Set up Wireless Networking
    - name: Set up Wireless(WiFi) Connection
      blockinfile:
          path: /etc/wpa_supplicant/wpa_supplicant.conf
          backup: yes
          block: |
              ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
              update_config=1

    - name: Set up Wireless(WiFi) Connection
      blockinfile:
          path: /etc/wpa_supplicant/wpa_supplicant.conf
          backup: yes
          marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.ssid }}"
          block: |
              network={
                ssid={{ item.ssid }}
                psk={{ item.psk }}
                proto=RSN
                key_mgmt=WPA-PSK
                pairwise=CCMP
                auth_alg=OPEN
              }
      with_items:
          - '{{ nmcli_wlan }}'


    # Checking if WiFi network is present and adding it, if it is.
    - name: nmcli wifi search
      shell: nmcli device wifi list | grep '{{ item.ssid }}'
      with_items:
          - '{{ nmcli_wlan }}'
      register: wifi_present
      failed_when: wifi_present.rc == 1
      # The exit code of grep is '0' is any lines are matches, and '1' if no lines are matched, and '2' if an error occurs.

    - name: nmcli wifi add
      command: nmcli device wifi connect '{{ item.ssid }}' name '{{ item.conn_name }}' ifname '{{ item.ifname }}' password "{{ item.psk }}"
      with_items:
          - '{{ nmcli_wlan }}'
      register: wifi_add
      when: wifi_present.rc == 0
      # When the exit code of grep in the previous task is '0', run this task. That is, if any lines match, run this task.

    - name: nmcli wifi ip address
      shell: nmcli con mod '{{ item.conn_name }}' ipv4.addresses '{{ item.ip4 }}' ipv4.gateway '{{ item.gw4 }}' ipv4.dns '{{ item.dns }}' connection.autoconnect yes && nmcli con up '{{ item.conn_name }}'
      with_items:
          - '{{ nmcli_wlan }}'
      when: wifi_add.rc == 0

  handlers:
    - name: delete ssh public keys
      file:
          path: '{{ ssh_key_file.dest }}'
          state: absent
