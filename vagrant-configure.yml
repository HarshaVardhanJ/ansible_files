---
# rpi_configure.yml :   Playbook for configuring freshly-booted Raspberry Pis

- hosts: vagrant-testvm
  remote_user: vagrant
  become: yes

  vars:
    # Packages to be installed
    packages:
        - vim                           # Vim Text Editor
        - vim-common                    # Vim Text Editor common files
        - rsyslog                       # Package for logging and log management
        - libsemanage-python            # Needed by 'nmcli' module of Ansible
        - policycoreutils-python        # Needed by 'nmcli' module of Ansible
        - NetworkManager-glib           # Needed by 'nmcli' module of Ansible
        - iptables                      # IPTables firewall
        - iptables-services             # Package to ensure that firewall rules survive reboot

    # SSH keys to be added, along with their sha1sum for integrity check
    ssh_keys:
      - keyfile: "/Users/harshavardhanj/.ssh/keychain/vagrant_key.pub"
        key: "{{ lookup('file', '/Users/harshavardhanj/.ssh/keychain/vagrant_key.pub') }}"
        sha1sum: "3b075c10fde1b88ecfcbbf297578b916bf9b8c5a"
        name: "vagrant"

    sshd_config_file:
      - "/Users/harshavardhanj/GitRepos/ansible_files/sshd_config"

    sshd_dir: "/etc/ssh/"

    # Vim configuration file
    vim_config_file:
        - "/Users/harshavardhanj/.vimrc"

    # NetworkManager ethernet interface information
    nmcli_eth:
        - conn_name: '{{ eth_name }}'
          type: ethernet
          ifname: eth2
          ip: '{{ eth_ip }}'
          gw: '{{ eth_gw }}'
          dns: "{{ eth_dns }}"

    # Values for Ethernet connection variables
    eth_name: "EthConn"
    eth_ip: "192.168.1.40/24"
    eth_gw: "192.168.1.1"
    eth_dns: "1.1.1.1 8.8.8.8 8.8.4.4"

    iptables_logfile: "/var/log/iptables.log"
    iptables_logrotate: "/etc/logrotate.d/iptables.conf"
    iptables_rsyslog: "/etc/rsyslog.d/10-iptables.conf"


  tasks:
    # Update all packages and repositories
    - name: Update all packages
      yum:
          name: "*"
          state: latest
          update_cache: yes

    # Install packages given in 'vars'
    - name: Install "{{ packages }}"
      yum:
          name: "{{ packages }}"
          state: latest
          update_cache: yes

    # Copy SSH public key(s) to remote machine
    - name: Copy local SSH public key(s) to machine
      copy:
          src: "{{ item.keyfile }}"
          dest: ~/
          checksum: "{{ item.sha1sum }}"
          owner: vagrant
          group: vagrant
          mode: 0400
      with_items:
          - "{{ ssh_keys }}"
      register: ssh_key_file

    # Copy given SSH keys to user's 'authorized keys' file
    - name: Copy SSH keys
      authorized_key:
          user: "{{ item.name }}"
          state: present
          key: "{{ item.key }}"
      with_items:
          - "{{ ssh_keys }}"
      when: ssh_key_file.changed
      notify: delete ssh public keys


    # Copy Vim configuration file to machine
    - name: Copy Vim configuration file
      copy:
          src: "{{ item }}"
          dest: ~/
          owner: vagrant
          group: vagrant
          mode: 0644
      with_items:
          - "{{ vim_config_file }}"


    # Copy SSHD configuration 'sshd_config' file
    - name: Copy SSHD configuration file
      copy:
        src: "{{ item }}"
        dest: "{{ sshd_dir }}"
        owner: root
        group: root
        mode: 0644
      with_items:
        - "{{ sshd_config_file }}"


   # Create rsyslog configuration file for iptables
   - name: Rsyslog file for iptables
     file: '{{ item }}'
       state: touch
       mode: 0640
       owner: root
       group: root
     with_items:
       - "{{ iptables_rsyslog }}"
   # Add config details to rsyslog iptables file
   - name: Rsyslog configuration for iptables
     blockinfile:
       path: "{{ iptables_rsyslog }}"
       block: |
         :msg, contains, "IPTABLES DROPPED: " {{ iptables_logfile }}
         & ~


    # Create logfile for iptables logging, and logrotate config
    # file for iptables
    - name: Create iptables.log and logrotate config
      file:
        path: '{{ item }}'
        state: touch
        mode: 0640
        owner: root
        group: root
      with_items:
        - '{{ iptables_logfile }}'
        - '{{ iptables_logrotate }}'


    # Add logrotate configuration
    - name: Add logrotate configuration for iptables
      blockinfile:
        path: '{{ iptables_logrotate }}'
        block: |
          "'{{ iptables_logfile }}'" {
            rotate 3                      # Rotate 3 log files before being removed.
            size 200k                     # Rotate the log file when its size reaches 200kB.
            copytruncate                  # Truncate the original log file to zero size in place after creating a copy.
            dateext                       # Archive old versions of log files adding a date extension.
            dateformat %d%m               # Format to use for the 'dateext' option.
            dateyesterday                 # Use yesterday's instead of today's date to create the dateext extension, 
                                            # so that the rotated log file has a date in its name that is the same as the 
                                            # timestamps within it.
            notifempty                    # Do not rotate the log if it is empty.
            shred                         # Delete log files using shred -u instead of unlink(). 
                                            # This should ensure that logs are not readable after their scheduled deletion.
          }

    # Setting up firewall rules
    #
    # Allow input packets on loopback interface
    - name: Allow packets on loopback interface
      iptables:
        action: append
        chain: INPUT
        in_interface: lo
        jump: ACCEPT
        comment: Allow input packets on loopback interface

      # Allow TCP packets which have a state of related,established on eth0 interface
    - name: Allow all established and related connections
      iptables:
        action: append
        chain: INPUT
        protocol: tcp
        in_interface: eth0
        ctstate: ESTABLISHED,RELATED
        jump: ACCEPT
        comment: Allow all established, related connections on eth0

      # Allow all TCP packets originating from the other Pis
    - name: Allow connections from other Pis
      iptables:
        action: append
        chain: INPUT
        protocol: tcp
        in_interface: eth0
        source: "192.168.1.160,192.168.1.161,192.168.1.162"
        jump: ACCEPT
        comment: Allow all tcp connections from the other Pis

      # Allow TCP packets with a destination port of 22 on eth0 interface
    - name: Allow SSH connections
      iptables:
        action: append
        chain: INPUT
        protocol: tcp
        in_interface: eth0
        destination_port: 22
        jump: ACCEPT
        comment: Allow tcp connection attempts on port 22 (SSH)

      # Allow UDP packets from port 53 associated with an established connection originating from
      # pre-defined DNS server IP addresses
    - name: Allow DNS connections
      iptables:
        action: append
        chain: INPUT
        protocol: udp
        in_interface: eth0
        source: "{{ eth_dns | regex_replace(' ', ',') }}"
        source_port: 53
        ctstate: ESTABLISHED
        jump: ACCEPT
        comment: Accept all established UDP connections from certain IP and port 53 (DNS)

      # Allow TCP packets from port 53 associated with an established connection originating from
      # pre-defined DNS server IP addresses
    - name: Allow DNS connections
      iptables:
        action: append
        chain: INPUT
        protocol: tcp
        in_interface: eth0
        source: "{{ eth_dns | regex_replace(' ', ',') }}"
        source_port: 53
        ctstate: ESTABLISHED
        jump: ACCEPT
        comment: Accept all established TCP connections from certain IP and port 53 (DNS)

      # Allow ICMP echo-request packets at a limited rate of 3/second
    - name: Rate limit echo request ICMP packets
      iptables:
        action: append
        chain: INPUT
        protocol: icmp
        in_interface: eth0
        icmp_type: echo-request
        limit: 3/second
        limit_burst: 5
        jump: ACCEPT
        comment: Accept ICMP echo requests at a limited rate of 3/s

      # Allow ICMP echo-reply packets at a limited rate of 3/second
    - name: Rate limit echo reply ICMP packets
      iptables:
        action: append
        chain: INPUT
        protocol: icmp
        icmp_type: echo-reply
        limit: 3/second
        limit_burst: 5
        jump: ACCEPT
        comment: Accept ICMP echo replies at a limited rate of 3/s

      # Allow ICMP source-quench packets at a limited rate of 2/second
    - name: Rate limit source quench ICMP packets
      iptables:
        action: append
        chain: INPUT
        protocol: icmp
        icmp_type: source-quench
        limit: 2/second
        jump: ACCEPT
        comment: Accept ICMP source quench at a limited rate of 2/s

      # Log all further packets with a pre-defined prefix, at a limited rate of 3/second
    - name: Log all tcp packets
      iptables:
        action: append
        chain: INPUT
        protocol: tcp
        limit: 3/s
        limit_burst: 5
        log_prefix: "[IPTABLES DROPPED]: "
        jump: LOG
        comment: Log all TCP packets with a prefix

        # Set INPUT chain policy to DROP
    - name: Input chain to Drop
      iptables:
        chain: INPUT
        policy: DROP

      # Set FORWARD chain policy to DROP
    - name: Forward chain to Drop
      iptables:
        chain: FORWARD
        policy: DROP

      # Set OUTPUT chain policy to ACCEPT
    - name: Output chain to Drop
      iptables:
        chain: OUTPUT
        policy: ACCEPT
        

  handlers:
    # Delete the SSH public key that was copied to the remote machine
    - name: delete ssh public keys
      file:
          path: '{{ ssh_key_file.dest }}'
          state: absent
